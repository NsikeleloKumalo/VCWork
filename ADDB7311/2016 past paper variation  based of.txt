2016 past paper variation  based of preloads 
Q.1.2 - Display the customer name, pet type, and quantity purchased:

Variation 1 - Display the customer name, pet breed, and quantity purchased:

sql
Copy code
SELECT C.customer_name, P.pet_breed, COUNT(*) AS QUANTITY
FROM CUSTOMER C
JOIN PET_SALES PS ON C.customer_id = PS.customer_id
JOIN PETS P ON PS.pet_id = P.pet_id
GROUP BY C.customer_name, P.pet_breed;
Sample Output (Variation 1):

markdown
Copy code
CUSTOMER_NAME     PET_BREED       QUANTITY
-----------------------------------------
Jeff Jones        Siamese         1
Sally Williams    Jack Russel     1
Sam Henry         Parrot          1
Sally Williams    Dwarf           1
Jack West         Koi             1
Variation 2 - Display the customer email, pet type, and total quantity of pets purchased:

sql
Copy code
SELECT C.customer_email, P.pet_type, SUM(PS.quantity) AS TOTAL_QUANTITY
FROM CUSTOMER C
JOIN PET_SALES PS ON C.customer_id = PS.customer_id
JOIN PETS P ON PS.pet_id = P.pet_id
GROUP BY C.customer_email, P.pet_type;
Sample Output (Variation 2):

sql
Copy code
CUSTOMER_EMAIL         PET_TYPE       TOTAL_QUANTITY
---------------------------------------------------
jj@xcom.com            Cat            1
sally@ymail.com        Dog            2
sat@xsat.com           Bird           1
jaz@xsat.com           Rabbit         1
Q.1.3 - Display the customer name, pet type, total bill, and discounted total:

Variation 1 - Display the customer name, pet breed, total bill, and discounted total:

sql
Copy code
SELECT C.customer_name, P.pet_breed, SUM(P.price) AS TOTAL,
       SUM(P.price * 0.10) AS DISCOUNT,
       SUM(P.price - (P.price * 0.10)) AS DISCOUNTED_TOTAL
FROM CUSTOMER C
JOIN PET_SALES PS ON C.customer_id = PS.customer_id
JOIN PETS P ON PS.pet_id = P.pet_id
GROUP BY C.customer_name, P.pet_breed;
Sample Output (Variation 1):

yaml
Copy code
CUSTOMER_NAME      PET_BREED       TOTAL    DISCOUNT   DISCOUNTED_TOTAL
-----------------------------------------------------------------------
Jeff Jones         Siamese         3800.00  380.00     3420.00
Sally Williams     Jack Russel     5000.00  500.00     4500.00
Sam Henry          Parrot          2500.00  250.00     2250.00
Sally Williams     Dwarf           550.00   55.00      495.00
Jack West          Koi             280.00   28.00      252.00
Variation 2 - Display the customer name, pet type, total bill, and apply a 5% discount:

sql
Copy code
SELECT C.customer_name, P.pet_type, SUM(P.price) AS TOTAL,
       SUM(P.price * 0.05) AS DISCOUNT,
       SUM(P.price - (P.price * 0.05)) AS DISCOUNTED_TOTAL
FROM CUSTOMER C
JOIN PET_SALES PS ON C.customer_id = PS.customer_id
JOIN PETS P ON PS.pet_id = P.pet_id
GROUP BY C.customer_name, P.pet_type;
Sample Output (Variation 2):

yaml
Copy code
CUSTOMER_NAME     PET_TYPE       TOTAL    DISCOUNT   DISCOUNTED_TOTAL
---------------------------------------------------------------------
Jeff Jones        Cat            3800.00  190.00     3610.00
Sally Williams    Dog            5000.00  250.00     4750.00
Sam Henry         Bird           2500.00  125.00     2375.00
Sally Williams    Rabbit         550.00   27.50      522.50
Jack West         Fish           280.00   14.00      266.00
Q.1.4 - Calculate the total sales amount for a specific pet:

Variation 1 - Calculate the total sales amount for product id "X501":

sql
Copy code
DECLARE
    v_total_sales NUMBER(8,2);
BEGIN
    SELECT SUM(P.price)
    INTO v_total_sales
    FROM PET_SALES PS
    JOIN PETS P ON PS.pet_id = P.pet_id
    WHERE P.pet_id = 100001; -- Replace with the desired pet_id (X501)

    DBMS_OUTPUT.PUT_LINE('The total sales amount for product Jack Russel is: R' || TO_CHAR(v_total_sales, '99999.99'));
END;
/
Sample Output (Variation 1):

csharp
Copy code
Anonymous block completed
The total sales amount for product Jack Russel is: R5000.00
Variation 2 - Calculate the total sales amount for product id "X503":

sql
Copy code
DECLARE
    v_total_sales NUMBER(8,2);
BEGIN
    SELECT SUM(P.price)
    INTO v_total_sales
    FROM PET_SALES PS
    JOIN PETS P ON PS.pet_id = P.pet_id
    WHERE P.pet_id = 100003; -- Replace with the desired pet_id (X503)

    DBMS_OUTPUT.PUT_LINE('The total sales amount for product Parrot is: R' || TO_CHAR(v_total_sales, '99999.99'));
END;
/
Sample Output (Variation 2):

csharp
Copy code
Anonymous block completed
The total sales amount for product Parrot is: R2500.00
Q.1.5 - Display the number of purchases made by each customer:

Variation 1 - Display the number of purchases made by each customer's email:

sql
Copy code
DECLARE
    v_customer_email CUSTOMER.customer_email%TYPE;
    v_purchase_count NUMBER(6);
    CURSOR purchase_cursor IS
        SELECT C.customer_email, COUNT(*) AS purchase_count
        FROM CUSTOMER C
        JOIN PET_SALES PS ON C.customer_id = PS.customer_id
        GROUP BY C.customer_email;
BEGIN
    OPEN purchase_cursor;
    LOOP
        FETCH purchase_cursor INTO v_customer_email, v_purchase_count;
        EXIT WHEN purchase_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Purchases made by ' || v_customer_email || ': ' || v_purchase_count);
    END LOOP;
    CLOSE purchase_cursor;
END;
/
Sample Output (Variation 1):

scss
Copy code
Anonymous block completed
Purchases made by jj@xcom.com: 1
Purchases made by sally@ymail.com: 2
Purchases made by sat@xsat.com: 1
Purchases made by jaz@xsat.com: 1
Variation 2 - Display the number of purchases made by each customer's name:

sql
Copy code
DECLARE
    v_customer_name CUSTOMER.customer_name%TYPE;
    v_purchase_count NUMBER(6);
    CURSOR purchase_cursor IS
        SELECT C.customer_name, COUNT(*) AS purchase_count
        FROM CUSTOMER C
        JOIN PET_SALES PS ON C.customer_id = PS.customer_id
        GROUP BY C.customer_name;
BEGIN
    OPEN purchase_cursor;
    LOOP
        FETCH purchase_cursor INTO v_customer_name, v_purchase_count;
        EXIT WHEN purchase_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Purchases made by ' || v_customer_name || ': ' || v_purchase_count);
    END LOOP;
    CLOSE purchase_cursor;
END;
/
Sample Output (Variation 2):

csharp
Copy code
Anonymous block completed
Purchases made by Jeff Jones: 1
Purchases made by Sally Williams: 2
Purchases made by Sam Henry: 1
Purchases made by Jack West: 1
Q.1.6 - Create a view called No_Purchases to display customers with no purchases:

Variation 1 - Create a view called No_Purchases_CustomerName:

sql
Copy code
CREATE VIEW No_Purchases_CustomerName AS
SELECT C.customer_name
FROM CUSTOMER C
WHERE C.customer_id NOT IN (SELECT DISTINCT customer_id FROM PET_SALES);
Sample Output (Variation 1):

markdown
Copy code
No_Purchases_CustomerName
-------------------------
Jabulani Zintle
Variation 2 - Create a view called No_Purchases_CustomerEmail:

sql
Copy code
CREATE VIEW No_Purchases_CustomerEmail AS
SELECT C.customer_email
FROM CUSTOMER C
WHERE C.customer_id NOT IN (SELECT DISTINCT customer_id FROM PET_SALES);
Sample Output (Variation 2):

markdown
Copy code
No_Purchases_CustomerEmail
--------------------------
jaz@xsat.com
Q.1.7 - Display whether a specific pet stock level needs to be increased:

Variation 1 - Display whether the stock level for a specific pet is stable:

sql
Copy code
DECLARE
    v_stock_level NUMBER(6);
BEGIN
    SELECT COUNT(*)
    INTO v_stock_level
    FROM PETS
    WHERE pet_id = 100004; -- Replace with the desired pet_id

    IF v_stock_level >= 10 THEN
        DBMS_OUTPUT.PUT_LINE('Stock levels are stable');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Stock levels are not stable. Stock levels need to be increased');
    END IF;
END;
/
Sample Output (Variation 1):

css
Copy code
Anonymous block completed
Stock levels are not stable. Stock levels need to be increased
Variation 2 - Display whether the stock level for a specific pet is stable (different pet):

sql
Copy code
DECLARE
    v_stock_level NUMBER(6);
BEGIN
    SELECT COUNT(*)
    INTO v_stock_level
    FROM PETS
    WHERE pet_id = 100001; -- Replace with the desired pet_id

    IF v_stock_level >= 10 THEN
        DBMS_OUTPUT.PUT_LINE('Stock levels are stable');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Stock levels are not stable. Stock levels need to be increased');
    END IF;
END;
/
Sample Output (Variation 2):

mathematica
Copy code
Anonymous block completed
Stock levels are stable
Q.1.8 - Create a user called sam_smith with select privileges for PET_SALES:

Variation 1 - Create a user called john_doe with select privileges for PET_SALES:

sql
Copy code
CREATE USER john_doe IDENTIFIED BY doe12345;
GRANT SELECT ON PET_SALES TO john_doe;
Sample Output (Variation 1): User and privileges created successfully.

Variation 2 - Create a user called mary_smith with select privileges for CUSTOMER:

sql
Copy code
CREATE USER mary_smith IDENTIFIED BY smith12345;
GRANT SELECT ON CUSTOMER TO mary_smith;
Sample Output (Variation 2): User and privileges created successfully.

Q.1.9 - Create a sequence called sales_id starting at 560 and incrementing by one:

Variation 1 - Create a sequence called order_id starting at 1000 and incrementing by 1:

sql
Copy code
CREATE SEQUENCE order_id
    START WITH 1000
    INCREMENT BY 1;
Sample Output (Variation 1): Sequence created successfully.

Variation 2 - Create a sequence called customer_id starting at 10000 and incrementing by 10:

sql
Copy code
CREATE SEQUENCE customer_id
    START WITH 10000
    INCREMENT BY 10;
Sample Output (Variation 2): Sequence created successfully.

These variations demonstrate different scenarios and questions you can ask based on the same set of tables and data. Feel free to adapt these variations further as needed for your specific use case.