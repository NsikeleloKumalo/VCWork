// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using TheRideYouRentFinal.Models;

namespace TheRideYouRentFinal.Data
{
    public partial class TheRideYouRentDBTestContext : DbContext
    {
        public TheRideYouRentDBTestContext()
        {
        }

        public TheRideYouRentDBTestContext(DbContextOptions<TheRideYouRentDBTestContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<CarBodyType> CarBodyType { get; set; }
        public virtual DbSet<CarMake> CarMake { get; set; }
        public virtual DbSet<Driver> Driver { get; set; }
        public virtual DbSet<Inspector> Inspector { get; set; }
        public virtual DbSet<Rental> Rental { get; set; }
        public virtual DbSet<ReturnCar> ReturnCar { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=NSIKELELO18;Initial Catalog=TheRideYouRentDBTest;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Car>(entity =>
            {
                entity.HasKey(e => e.CarNo)
                    .HasName("PK__Car__68A00DDD6D93A157");

                entity.Property(e => e.CarNo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Avaliable)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BodyType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CarMake)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Car_Make");

                entity.Property(e => e.KilometresTravelled).HasColumnName("Kilometres_Travelled");

                entity.Property(e => e.Model)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceKilometres).HasColumnName("Service_kilometres");
            });

            modelBuilder.Entity<CarBodyType>(entity =>
            {
                entity.ToTable("Car_BodyType");

                entity.Property(e => e.CarBodyTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("Car_BodyTypeID");

                entity.Property(e => e.BodyTypeDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BodyType_Description");
            });

            modelBuilder.Entity<CarMake>(entity =>
            {
                entity.ToTable("Car_Make");

                entity.Property(e => e.CarMakeId)
                    .ValueGeneratedNever()
                    .HasColumnName("Car_MakeID");

                entity.Property(e => e.MakeDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Make_Description");
            });

            modelBuilder.Entity<Driver>(entity =>
            {
                entity.Property(e => e.DriverId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Driver_ID");

                entity.Property(e => e.DriverAddress)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DriverContactNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DriverEmail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DriverName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Inspector>(entity =>
            {
                entity.HasKey(e => e.InspectorNo)
                    .HasName("PK__Inspecto__F49FBEAF73587D72");

                entity.Property(e => e.InspectorNo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Inspector_no");

                entity.Property(e => e.InspectorEmail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InspectorMobile)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InspectorName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rental>(entity =>
            {
                entity.HasKey(e => e.RentalNo)
                    .HasName("PK__Rental__9D2089954DD7F904");

                entity.Property(e => e.RentalNo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Rental_no");

                entity.Property(e => e.CarNo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DriverId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Driver_ID");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.InspectorNo)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Inspector_no");

                entity.Property(e => e.RentalFee).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.CarNoNavigation)
                    .WithMany(p => p.Rental)
                    .HasForeignKey(d => d.CarNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rental__CarNo__4222D4EF");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.Rental)
                    .HasForeignKey(d => d.DriverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rental__Driver_I__440B1D61");

                entity.HasOne(d => d.InspectorNoNavigation)
                    .WithMany(p => p.Rental)
                    .HasForeignKey(d => d.InspectorNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rental__Inspecto__4316F928");
            });

            modelBuilder.Entity<ReturnCar>(entity =>
            {
                entity.HasKey(e => e.ReturnId)
                    .HasName("PK__ReturnCa__0F4E406E5D54D785");

                entity.Property(e => e.ReturnId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Return_id");

                entity.Property(e => e.InspectorNo)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Inspector_no");

                entity.Property(e => e.RentalNo)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Rental_no");

                entity.Property(e => e.ReturnDate).HasColumnType("date");

                entity.HasOne(d => d.InspectorNoNavigation)
                    .WithMany(p => p.ReturnCar)
                    .HasForeignKey(d => d.InspectorNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReturnCar__Inspe__47DBAE45");

                entity.HasOne(d => d.RentalNoNavigation)
                    .WithMany(p => p.ReturnCar)
                    .HasForeignKey(d => d.RentalNo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReturnCar__Renta__46E78A0C");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}